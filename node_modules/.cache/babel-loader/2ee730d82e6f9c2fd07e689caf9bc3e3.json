{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { productListReducer, productDetailsReducer, productsaveReducer, productDeleteReducer } from './Reducers/ProductReducer';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { cartReducer } from './Reducers/CartReducer';\nimport { userSigninReducer } from './Reducers/SigninReducer';\nimport { userRegisterReducer } from './Reducers/RegisterReducer';\nimport Cookie from 'js-cookie';\n/*Cookie helps in preserving the state when screen refreshed is perform */\n\n/* To get access to the cookie and convert it back to JSON object so it can be set as initial state for state cart . Note that || [] sets empty array if there is no item*/\n\nconst cartItems = Cookie.getJSON(\"cartItems\") || [];\nconst userInfo = Cookie.getJSON(\"userInfo\");\nconst shipping = Cookie.getJSON(\"shipping\");\nconst payment = Cookie.getJSON(\"payment\");\nconst initialState = {\n  cart: {\n    cartItems,\n    shpping,\n    payment\n  },\n  userSignin: {\n    userInfo\n  }\n};\nconst logger = createLogger();\nconst rootreducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userSignin: userSigninReducer,\n  userRegisterReducer,\n  userRegister: userRegisterReducer,\n  productSave: productsaveReducer,\n  productDelete: productDeleteReducer\n});\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\nconst store = createStore(rootreducer, initialState, composeEnhancer(applyMiddleware(thunk, logger)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/Fosy-Store/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","compose","productListReducer","productDetailsReducer","productsaveReducer","productDeleteReducer","thunk","createLogger","cartReducer","userSigninReducer","userRegisterReducer","Cookie","cartItems","getJSON","userInfo","shipping","payment","initialState","cart","shpping","userSignin","logger","rootreducer","productList","productDetails","userRegister","productSave","productDelete","composeEnhancer","window","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAwE,OAAxE;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,EAAoDC,kBAApD,EAAwEC,oBAAxE,QAAoG,2BAApG;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;;AACA;;AACA,MAAMC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAe,WAAf,KAA+B,EAAjD;AACA,MAAMC,QAAQ,GAAGH,MAAM,CAACE,OAAP,CAAe,UAAf,CAAjB;AACA,MAAME,QAAQ,GAAGJ,MAAM,CAACE,OAAP,CAAe,UAAf,CAAjB;AACA,MAAMG,OAAO,GAAGL,MAAM,CAACE,OAAP,CAAe,SAAf,CAAhB;AAGA,MAAMI,YAAY,GAAG;AAAEC,EAAAA,IAAI,EAAE;AAAEN,IAAAA,SAAF;AAAaO,IAAAA,OAAb;AAAsBH,IAAAA;AAAtB,GAAR;AAAyCI,EAAAA,UAAU,EAAE;AAACN,IAAAA;AAAD;AAArD,CAArB;AACA,MAAMO,MAAM,GAAGd,YAAY,EAA3B;AACA,MAAMe,WAAW,GAAGvB,eAAe,CAAC;AAChCwB,EAAAA,WAAW,EAAErB,kBADmB;AAEhCsB,EAAAA,cAAc,EAAErB,qBAFgB;AAGhCe,EAAAA,IAAI,EAAEV,WAH0B;AAIhCY,EAAAA,UAAU,EAAEX,iBAJoB;AAIDC,EAAAA,mBAJC;AAKhCe,EAAAA,YAAY,EAAEf,mBALkB;AAMhCgB,EAAAA,WAAW,EAAEtB,kBANmB;AAOhCuB,EAAAA,aAAa,EAAEtB;AAPiB,CAAD,CAAnC;AAUA,MAAMuB,eAAe,GAAGC,MAAM,CAACC,kCAAP,IAA6C7B,OAArE;AACA,MAAM8B,KAAK,GAAGjC,WAAW,CAACwB,WAAD,EAAcL,YAAd,EAA4BW,eAAe,CAAC5B,eAAe,CAACM,KAAD,EAAQe,MAAR,CAAhB,CAA3C,CAAzB;AAGA,eAAeU,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose  } from 'redux';\r\nimport { productListReducer, productDetailsReducer, productsaveReducer, productDeleteReducer } from './Reducers/ProductReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger'\r\nimport { cartReducer } from './Reducers/CartReducer';\r\nimport { userSigninReducer } from './Reducers/SigninReducer';\r\nimport { userRegisterReducer } from './Reducers/RegisterReducer';\r\nimport Cookie from 'js-cookie';\r\n    \r\n/*Cookie helps in preserving the state when screen refreshed is perform */\r\n/* To get access to the cookie and convert it back to JSON object so it can be set as initial state for state cart . Note that || [] sets empty array if there is no item*/\r\nconst cartItems = Cookie.getJSON(\"cartItems\") || [];\r\nconst userInfo = Cookie.getJSON(\"userInfo\") ;\r\nconst shipping = Cookie.getJSON(\"shipping\") ;\r\nconst payment = Cookie.getJSON(\"payment\") ;\r\n\r\n\r\nconst initialState = { cart: { cartItems, shpping, payment }, userSignin: {userInfo } };\r\nconst logger = createLogger();\r\nconst rootreducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    cart: cartReducer,\r\n    userSignin: userSigninReducer, userRegisterReducer,\r\n    userRegister: userRegisterReducer,\r\n    productSave: productsaveReducer,\r\n    productDelete: productDeleteReducer\r\n})\r\n\r\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\r\nconst store = createStore(rootreducer, initialState, composeEnhancer(applyMiddleware(thunk, logger)))\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}