{"ast":null,"code":"/*Creation of store for state management*/\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { getDataReducer } from './Reducers/GetDataReducer.js';\nimport storage from 'redux-persist/lib/storage';\nimport { updateDateReducer } from './Reducers/UpdateDateReducer.js';\n/*function to save state to Local Storage. This is to help preserving the states on page refresh*/\n\nfunction saveToLocalStorage(state) {\n  try {\n    const serialisedState = JSON.stringify(state);\n    localStorage.setItem('state', serialisedState);\n  } catch (e) {\n    console.log(e);\n  }\n}\n/*function to get state from Local Storage. This is to help get the preserved states on page refresh*/\n\n\nfunction loadFromoLocalStorage() {\n  try {\n    const serialisedState = localStorage.getItem('state');\n    if (serialisedState === null) return undefined;\n    return JSON.parse(serialisedState);\n  } catch (e) {\n    console.log(e);\n    return undefined;\n  }\n}\n\nconst logger = createLogger();\nconst persistedState = loadFromoLocalStorage();\nconst rootreducer = combineReducers({\n  carbon: getDataReducer,\n  chosenDate: updateDateReducer\n});\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\nconst store = createStore(rootreducer, persistedState, composeEnhancer(applyMiddleware(thunk, logger)));\nstore.subscribe(() => saveToLocalStorage(store.getState()));\nexport default store;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/CLIENT PROJECTS/Carbon-App/Carbon-Intensity/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","compose","thunk","createLogger","getDataReducer","storage","updateDateReducer","saveToLocalStorage","state","serialisedState","JSON","stringify","localStorage","setItem","e","console","log","loadFromoLocalStorage","getItem","undefined","parse","logger","persistedState","rootreducer","carbon","chosenDate","composeEnhancer","window","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","store","subscribe","getState"],"mappings":"AAAA;AAEA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAuE,OAAvE;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,cAAT,QAA+B,8BAA/B;AACA,OAAOC,OAAP,MAAoB,2BAApB;AACA,SAASC,iBAAT,QAAkC,iCAAlC;AAGA;;AACA,SAASC,kBAAT,CAA4BC,KAA5B,EAAmC;AAC/B,MAAI;AACA,UAAMC,eAAe,GAAGC,IAAI,CAACC,SAAL,CAAeH,KAAf,CAAxB;AACAI,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BJ,eAA9B;AACH,GAHD,CAIA,OAAOK,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAaF,CAAb;AACH;AACJ;AACD;;;AACA,SAASG,qBAAT,GAAiC;AAC7B,MAAI;AACA,UAAMR,eAAe,GAAGG,YAAY,CAACM,OAAb,CAAqB,OAArB,CAAxB;AACA,QAAIT,eAAe,KAAK,IAAxB,EACI,OAAOU,SAAP;AACA,WAAOT,IAAI,CAACU,KAAL,CAAWX,eAAX,CAAP;AACC,GALT,CAMA,OAAOK,CAAP,EAAU;AACNC,IAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,WAAOK,SAAP;AACH;AACJ;;AAID,MAAME,MAAM,GAAGlB,YAAY,EAA3B;AAEA,MAAMmB,cAAc,GAAGL,qBAAqB,EAA5C;AAEA,MAAMM,WAAW,GAAGxB,eAAe,CAAC;AAChCyB,EAAAA,MAAM,EAAEpB,cADwB;AAEhCqB,EAAAA,UAAU,EAAEnB;AAFoB,CAAD,CAAnC;AAOA,MAAMoB,eAAe,GAAGC,MAAM,CAACC,kCAAP,IAA6C3B,OAArE;AACA,MAAM4B,KAAK,GAAG/B,WAAW,CAACyB,WAAD,EAAcD,cAAd,EAA+BI,eAAe,CAAC1B,eAAe,CAACE,KAAD,EAAQmB,MAAR,CAAhB,CAA9C,CAAzB;AAEAQ,KAAK,CAACC,SAAN,CAAgB,MAAMvB,kBAAkB,CAACsB,KAAK,CAACE,QAAN,EAAD,CAAxC;AACA,eAAeF,KAAf","sourcesContent":["/*Creation of store for state management*/\r\n\r\nimport { createStore, combineReducers, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger'\r\nimport { getDataReducer } from './Reducers/GetDataReducer.js';\r\nimport storage from 'redux-persist/lib/storage'\r\nimport { updateDateReducer } from './Reducers/UpdateDateReducer.js';\r\n\r\n\r\n/*function to save state to Local Storage. This is to help preserving the states on page refresh*/\r\nfunction saveToLocalStorage(state) {\r\n    try {\r\n        const serialisedState = JSON.stringify(state)\r\n        localStorage.setItem('state', serialisedState)\r\n    }\r\n    catch (e) {\r\n        console.log (e)\r\n    }\r\n}\r\n/*function to get state from Local Storage. This is to help get the preserved states on page refresh*/\r\nfunction loadFromoLocalStorage() {\r\n    try {\r\n        const serialisedState = localStorage.getItem('state')\r\n        if (serialisedState === null) \r\n            return undefined\r\n            return JSON.parse(serialisedState)\r\n            }\r\n    catch (e) {\r\n        console.log(e);\r\n        return undefined\r\n    }\r\n}\r\n\r\n\r\n\r\nconst logger = createLogger();\r\n\r\nconst persistedState = loadFromoLocalStorage()\r\n\r\nconst rootreducer = combineReducers({\r\n    carbon: getDataReducer,\r\n    chosenDate: updateDateReducer\r\n   \r\n})\r\n\r\n\r\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\r\nconst store = createStore(rootreducer, persistedState,  composeEnhancer(applyMiddleware(thunk, logger)))\r\n\r\nstore.subscribe(() => saveToLocalStorage(store.getState()))\r\nexport default store"]},"metadata":{},"sourceType":"module"}