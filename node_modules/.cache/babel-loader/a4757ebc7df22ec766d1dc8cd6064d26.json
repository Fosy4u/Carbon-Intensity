{"ast":null,"code":"import { CART_ADD_ITEM, REMOVE_FROM_CART, CART_SAVE_SHIPPING, CART_SAVE_PAYMENT } from '../Constants/Cartconstants';\n\nfunction cartReducer(state = {\n  cartItems: []\n}, action) {\n  switch (action.type) {\n    case CART_ADD_ITEM:\n      const item = action.payload;\n      /* check if new item is already existing*/\n\n      const existingproduct = state.cartItems.find(x => x.product === item.product);\n\n      if (existingproduct) {\n        return {\n          /* If product being added was already existing, replace the already existing product with the new one which is the item*/\n          cartItems: state.cartItems.map(x => x.product === existingproduct.product ? item : x)\n        };\n      }\n\n      return {\n        cartItems: [...state.cartItems, item]\n      };\n\n    case REMOVE_FROM_CART:\n      return {\n        cartItems: state.cartItems.filter(item => item.product !== action.payload)\n      };\n\n    case CART_SAVE_SHIPPING:\n      return { ...state,\n        shipping: action.payload\n      };\n\n    case CART_SAVE_PAYMENT:\n      return { ...state,\n        payment: action.payload\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport { cartReducer };","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/Fosy-Store/src/Reducers/CartReducer.js"],"names":["CART_ADD_ITEM","REMOVE_FROM_CART","CART_SAVE_SHIPPING","CART_SAVE_PAYMENT","cartReducer","state","cartItems","action","type","item","payload","existingproduct","find","x","product","map","filter","shipping","payment"],"mappings":"AAAA,SAASA,aAAT,EAAwBC,gBAAxB,EAA0CC,kBAA1C,EAA8DC,iBAA9D,QAAsF,4BAAtF;;AAEA,SAASC,WAAT,CAAqBC,KAAK,GAAG;AAAEC,EAAAA,SAAS,EAAE;AAAb,CAA7B,EAAgDC,MAAhD,EAAwD;AACpD,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKR,aAAL;AACI,YAAMS,IAAI,GAAGF,MAAM,CAACG,OAApB;AACJ;;AACI,YAAMC,eAAe,GAAIN,KAAK,CAACC,SAAN,CAAgBM,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcL,IAAI,CAACK,OAA7C,CAAzB;;AACA,UAAIH,eAAJ,EAAqB;AACjB,eAAO;AACH;AACAL,UAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBS,GAAhB,CAAoBF,CAAC,IAAIA,CAAC,CAACC,OAAF,KAAcH,eAAe,CAACG,OAA9B,GAAwCL,IAAxC,GAA+CI,CAAxE;AAFR,SAAP;AAKH;;AACD,aAAO;AACHP,QAAAA,SAAS,EAAE,CAAC,GAAGD,KAAK,CAACC,SAAV,EAAqBG,IAArB;AADR,OAAP;;AAGJ,SAAKR,gBAAL;AACI,aAAO;AAAEK,QAAAA,SAAS,EAAED,KAAK,CAACC,SAAN,CAAgBU,MAAhB,CAAuBP,IAAI,IAAIA,IAAI,CAACK,OAAL,KAAiBP,MAAM,CAACG,OAAvD;AAAb,OAAP;;AACJ,SAAKR,kBAAL;AACI,aAAO,EAAE,GAAGG,KAAL;AAAYY,QAAAA,QAAQ,EAAEV,MAAM,CAACG;AAA7B,OAAP;;AACJ,SAAKP,iBAAL;AACI,aAAO,EAAE,GAAGE,KAAL;AAAYa,QAAAA,OAAO,EAAEX,MAAM,CAACG;AAA5B,OAAP;;AAEJ;AACI,aAAOL,KAAP;AAvBR;AA0BH;;AAED,SAASD,WAAT","sourcesContent":["import { CART_ADD_ITEM, REMOVE_FROM_CART, CART_SAVE_SHIPPING, CART_SAVE_PAYMENT} from '../Constants/Cartconstants'\r\n\r\nfunction cartReducer(state = { cartItems: [] }, action) {\r\n    switch (action.type) {\r\n        case CART_ADD_ITEM:\r\n            const item = action.payload;\r\n        /* check if new item is already existing*/\r\n            const existingproduct  = state.cartItems.find(x => x.product === item.product);\r\n            if (existingproduct) {\r\n                return {\r\n                    /* If product being added was already existing, replace the already existing product with the new one which is the item*/\r\n                    cartItems: state.cartItems.map(x => x.product === existingproduct.product ? item : x)\r\n                }\r\n               \r\n            }\r\n            return {\r\n                cartItems: [...state.cartItems, item]\r\n            }\r\n        case REMOVE_FROM_CART:\r\n            return { cartItems: state.cartItems.filter(item => item.product !== action.payload) };\r\n        case CART_SAVE_SHIPPING:\r\n            return { ...state, shipping: action.payload };\r\n        case CART_SAVE_PAYMENT:\r\n            return { ...state, payment: action.payload }\r\n\r\n        default:\r\n            return state\r\n    }\r\n\r\n}\r\n\r\nexport { cartReducer }\r\n\r\n    "]},"metadata":{},"sourceType":"module"}