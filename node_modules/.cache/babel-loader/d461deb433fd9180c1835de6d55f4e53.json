{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\CLIENT PROJECTS\\\\Trilateral\\\\src\\\\Component\\\\Screen\\\\HomeScreen.js\";\n\n/* The Home Screen Component*/\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport '../Css/Componentscss.css';\nimport { useState, useEffect, history } from 'react';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport Navbar from '../Navbar/Navbar.js';\nimport { getDataAction } from '../../Actions/GetDataAction.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateDateAction } from '../../Actions/UpdateDateAction';\nimport Cookies from 'js-cookie';\n\nfunction HomeScreen(props) {\n  const dispatch = useDispatch();\n  /*setting state to store selected date in two different formats; one for fetching data from API and the other for displaying date in Plot Screen*/\n\n  const [dateSelected, setDateSelected] = useState();\n  const [day, setDay] = useState();\n  /* Getting state of the carbon intensity from the redux store*/\n\n  const carbonIntensityData = useSelector(state => state.carbon);\n  const {\n    loading,\n    carbonData\n  } = carbonIntensityData;\n  /*getting today date*/\n\n  const date = new Date();\n  /*getting the date of the last first day*/\n\n  let lastFirstDay = new Date(date);\n  lastFirstDay.setDate(lastFirstDay.getDate() - 1);\n  /*getting the date of the last second day*/\n\n  let lastSecondDay = new Date(date);\n  lastSecondDay.setDate(lastSecondDay.getDate() - 2);\n  /*getting the date of the last third day*/\n\n  let lastThirdDay = new Date(date);\n  lastThirdDay.setDate(lastThirdDay.getDate() - 3);\n  /*getting the date of the last fourth day*/\n\n  let lastFourthDay = new Date(date);\n  lastFourthDay.setDate(lastFourthDay.getDate() - 4);\n  /*getting the date of the last fifth day*/\n\n  let lastFifthDay = new Date(date);\n  lastFifthDay.setDate(lastFifthDay.getDate() - 5);\n  /*handling the selected date button click and updating the dateSelected state in the right format for Carbon Intensity API and display in plot screen*/\n\n  const dateSelectedHandler = (format1, format2) => {\n    let day = (\"0\" + format1.getDate()).slice(-2);\n    let month = (\"0\" + (format1.getMonth() + 1)).slice(-2);\n    let year = format1.getFullYear();\n    let date = year + \"-\" + month + \"-\" + day;\n    setDateSelected(date);\n    setDay(format2);\n  };\n  /*dispatching action for fetching carbon intensity data if date is selected */\n\n\n  const callFn = () => {\n    dispatch(getDataAction(dateSelected));\n    dispatch(updateDateAction(day));\n  };\n\n  const setCookies = () => {\n    Cookies.set('carbondataState', carbonData);\n    const x = Cookies.get();\n    console.log(x);\n  };\n  /*calling the function that will dispatch action to get data from the Carbon Intensity API whenever dateSelected state is updated and redirecting to plot screen*/\n\n\n  useEffect(() => {\n    if (dateSelected) {\n      callFn();\n      setCookies();\n      props.history.push('/plot');\n    }\n  }, [dateSelected]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Frontpage grid-container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"main\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"table\", {\n    className: \"table\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 25\n    }\n  }, /*#__PURE__*/React.createElement(\"thead\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 33\n    }\n  }, \" SELECT A DATE \"))), /*#__PURE__*/React.createElement(\"tbody\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 29\n    }\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 37\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button full-width\",\n    onClick: event => {\n      dateSelectedHandler(lastFirstDay, lastFirstDay.toDateString());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 41\n    }\n  }, \" \", lastFirstDay.toDateString(), \" \"), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 37\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button full-width\",\n    onClick: event => {\n      dateSelectedHandler(lastSecondDay, lastSecondDay.toDateString());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 42\n    }\n  }, \" \", lastSecondDay.toDateString(), \" \"), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 37\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button full-width\",\n    onClick: event => {\n      dateSelectedHandler(lastThirdDay, lastThirdDay.toDateString());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 42\n    }\n  }, \" \", lastThirdDay.toDateString(), \" \"), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 37\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button full-width\",\n    onClick: event => {\n      dateSelectedHandler(lastFourthDay, lastFourthDay.toDateString());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 42\n    }\n  }, \" \", lastFourthDay.toDateString(), \" \"), \" \")), /*#__PURE__*/React.createElement(\"tr\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 33\n    }\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 37\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    className: \"button full-width\",\n    onClick: event => {\n      dateSelectedHandler(lastFifthDay, lastFifthDay.toDateString());\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 42\n    }\n  }, \" \", lastFifthDay.toDateString(), \" \"), \" \"))))))), /*#__PURE__*/React.createElement(\"footer\", {\n    className: \"footer\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }\n  }, \"All rights reserved\"));\n}\n\nexport default HomeScreen;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/CLIENT PROJECTS/Trilateral/src/Component/Screen/HomeScreen.js"],"names":["ReactDOM","React","Component","useState","useEffect","history","Link","Route","Switch","withRouter","Navbar","getDataAction","useDispatch","useSelector","updateDateAction","Cookies","HomeScreen","props","dispatch","dateSelected","setDateSelected","day","setDay","carbonIntensityData","state","carbon","loading","carbonData","date","Date","lastFirstDay","setDate","getDate","lastSecondDay","lastThirdDay","lastFourthDay","lastFifthDay","dateSelectedHandler","format1","format2","slice","month","getMonth","year","getFullYear","callFn","setCookies","set","x","get","console","log","push","event","toDateString"],"mappings":"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","sourcesContent":["/* The Home Screen Component*/\n\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport '../Css/Componentscss.css';\nimport { useState, useEffect, history } from 'react';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport Navbar from '../Navbar/Navbar.js';\nimport {getDataAction } from '../../Actions/GetDataAction.js';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateDateAction } from '../../Actions/UpdateDateAction';\r\nimport Cookies from 'js-cookie';\r\n\n\n\n\r\n\n\n\n\n\n\n\n\n\nfunction HomeScreen (props) {\n\r\n    const dispatch = useDispatch();\r\n    /*setting state to store selected date in two different formats; one for fetching data from API and the other for displaying date in Plot Screen*/ \r\n    const [dateSelected, setDateSelected] = useState();\r\n    const [day, setDay] = useState();\r\n\r\n    /* Getting state of the carbon intensity from the redux store*/\r\n    const carbonIntensityData = useSelector(state => state.carbon);\r\n    const { loading, carbonData } = carbonIntensityData\r\n    \r\n\r\n    /*getting today date*/\r\n    const date = new Date();\r\n    \r\n\r\n    /*getting the date of the last first day*/\r\n    let lastFirstDay = new Date(date)\r\n    lastFirstDay.setDate(lastFirstDay.getDate() - 1)\r\n\r\n    /*getting the date of the last second day*/\r\n    let lastSecondDay = new Date(date)\r\n    lastSecondDay.setDate(lastSecondDay.getDate() - 2)\r\n\r\n    /*getting the date of the last third day*/\r\n    let lastThirdDay = new Date(date)\r\n    lastThirdDay.setDate(lastThirdDay.getDate() - 3)\r\n\r\n    /*getting the date of the last fourth day*/\r\n    let lastFourthDay = new Date(date)\r\n    lastFourthDay.setDate(lastFourthDay.getDate() - 4)\r\n\r\n    /*getting the date of the last fifth day*/\r\n    let lastFifthDay = new Date(date)\r\n    lastFifthDay.setDate(lastFifthDay.getDate() - 5)\r\n\r\n\r\n\r\n\r\n    /*handling the selected date button click and updating the dateSelected state in the right format for Carbon Intensity API and display in plot screen*/\r\n    const dateSelectedHandler = (format1, format2) => {\r\n\r\n        let day = (\"0\" + format1.getDate()).slice(-2);\r\n        let month = (\"0\" + (format1.getMonth() + 1\r\n        )).slice(-2);\r\n        let year = format1.getFullYear();\r\n        let date = (year + \"-\" + month + \"-\" + day)\r\n        setDateSelected(date);\r\n        setDay(format2)\r\n        \r\n\r\n        \r\n        \r\n    }\r\n/*dispatching action for fetching carbon intensity data if date is selected */\r\n    const callFn = () => {\r\n        dispatch(getDataAction(dateSelected));\r\n        dispatch(updateDateAction(day))\r\n        \r\n    }\r\n\r\n    const setCookies = () => {\r\n        Cookies.set('carbondataState', carbonData)\r\n        const x = Cookies.get()\r\n        console.log (x)\r\n    }\r\n\r\n    /*calling the function that will dispatch action to get data from the Carbon Intensity API whenever dateSelected state is updated and redirecting to plot screen*/\r\n    useEffect(() => {\r\n        if (dateSelected) {\r\n            \r\n            callFn();\r\n            setCookies();\r\n            props.history.push('/plot')\r\n        }\r\n    }, [dateSelected]);\r\n\r\n  \r\n\r\n    return (\r\n        <div className='Frontpage grid-container'>\r\n            \r\n\r\n            <main className='main'>\r\n                <div >\r\n                   \r\n\r\n                  \r\n\r\n                    <div >\r\n                        <table className='table'>\r\n                            <thead>\r\n                                <tr>\r\n\r\n                                <th> SELECT A DATE </th>\r\n                               \r\n                                                                \r\n                                </tr>\r\n                            </thead>\r\n                            \r\n                            <tbody>\r\n                                \r\n                                <tr>\r\n                                    <td><button className='button full-width' onClick={(event) => { dateSelectedHandler(lastFirstDay, lastFirstDay.toDateString()) }}> {lastFirstDay.toDateString()} </button> </td>\r\n                                        \r\n                                   </tr>\r\n\r\n                                <tr>\r\n                                    <td> <button className='button full-width' onClick={(event) => { dateSelectedHandler(lastSecondDay, lastSecondDay.toDateString()) }}> {lastSecondDay.toDateString()} </button> </td>\r\n\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td> <button className='button full-width' onClick={(event) => { dateSelectedHandler(lastThirdDay, lastThirdDay.toDateString()) }} > {lastThirdDay.toDateString()} </button> </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td> <button className='button full-width' onClick={(event) => { dateSelectedHandler(lastFourthDay, lastFourthDay.toDateString()) }} > {lastFourthDay.toDateString()} </button> </td>\r\n                                </tr>\r\n\r\n                                <tr>\r\n                                    <td> <button className='button full-width' onClick={(event) => { dateSelectedHandler(lastFifthDay, lastFifthDay.toDateString()) }} > {lastFifthDay.toDateString()} </button> </td>\r\n\r\n                                </tr>\r\n                                \r\n                                \r\n                            </tbody>\r\n                        </table>\r\n                    </div>\r\n\r\n                \r\n\r\n\r\n\r\n\r\n                </div>\r\n\r\n\r\n               \r\n\r\n            </main>\r\n\r\n\r\n\r\n            <footer className='footer'>\r\n                All rights reserved \r\n                </footer>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\n\nexport default HomeScreen;\n"]},"metadata":{},"sourceType":"module"}