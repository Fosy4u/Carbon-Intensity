{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\CLIENT PROJECTS\\\\Carbon-App\\\\Carbon-Intensity\\\\src\\\\Component\\\\Screen\\\\PlotScreen.js\";\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport '../Css/Componentscss.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\n\nconst PlotScreen = props => {\n  /* Getting state of the carbon intensity from the redux store*/\n  const carbonIntensityData = useSelector(state => state.carbon);\n  const {\n    loading,\n    carbonData\n  } = carbonIntensityData;\n  /* Getting date of the day from the redux store*/\n\n  const day = useSelector(state => state.chosenDate);\n  const {\n    date\n  } = day;\n  /*initialising state for plot data */\n\n  const [plotData, setPlotData] = useState({});\n  /*function to update plotData state with data and options for the plot */\n\n  const chart = () => {\n    const forecastData = carbonData.map(data => {\n      return data.intensity.forecast;\n    });\n    const actualData = carbonData.map(data => {\n      return data.intensity.actual;\n    });\n    const fromData = carbonData.map(data => {\n      return data.from;\n    });\n    setPlotData({\n      labels: fromData,\n      datasets: [{\n        label: 'Forecast Intensity ',\n        data: forecastData,\n        backgroundColor: ['rgba(255, 158, 64, 3)'],\n        bandwidth: 4\n      }, {\n        label: 'Actual Intensity ',\n        data: actualData,\n        backgroundColor: ['rgba(54, 162, 235, 1)'],\n        bandwidth: 4\n      }]\n    });\n  };\n  /*call chart function only when there is data from the Carbon Data intensity*/\n\n\n  useEffect(() => {\n    if (carbonData) {\n      if (date) {\n        chart();\n      }\n    }\n  }, [carbonData]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Frontpage \",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"main\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"date\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 21\n    }\n  }, \" \", date, \" \")), loading === true ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 37\n    }\n  }, \" Loading........  Please wait\") : /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 80\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: plotData,\n    options: {\n      responsive: true,\n      title: {\n        text: 'CARBON INTENSITY COMPARISON PLOT',\n        display: true,\n        fontSize: 20\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 10,\n            beginAtZero: true\n          },\n          gridLines: {\n            display: false\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: false\n          }\n        }]\n      },\n      animation: {\n        currentStep: 10,\n        numSteps: 10,\n        easing: 'easeInOutQuad',\n        duration: 1060\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 25\n    }\n  })))));\n};\n\nexport default PlotScreen;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/CLIENT PROJECTS/Carbon-App/Carbon-Intensity/src/Component/Screen/PlotScreen.js"],"names":["ReactDOM","React","Component","Line","useState","useEffect","useDispatch","useSelector","Link","Route","Switch","withRouter","PlotScreen","props","carbonIntensityData","state","carbon","loading","carbonData","day","chosenDate","date","plotData","setPlotData","chart","forecastData","map","data","intensity","forecast","actualData","actual","fromData","from","labels","datasets","label","backgroundColor","bandwidth","responsive","title","text","display","fontSize","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes","animation","currentStep","numSteps","easing","duration"],"mappings":";AAAA,OAAOA,QAAP,MAAqB,WAArB;AACA,OAAOC,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,IAAT,QAAqB,iBAArB;AACA,OAAO,0BAAP;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,SAAT,QAA0B,OAA1B;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,KAAf,EAAsBC,MAAtB,EAA8BC,UAA9B,QAAgD,kBAAhD;;AAKA,MAAMC,UAAU,GAAIC,KAAD,IAAW;AAG1B;AACA,QAAMC,mBAAmB,GAAGP,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACC,MAAhB,CAAvC;AACA,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAA0BJ,mBAAhC;AAEA;;AACA,QAAMK,GAAG,GAAGZ,WAAW,CAACQ,KAAK,IAAIA,KAAK,CAACK,UAAhB,CAAvB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAWF,GAAjB;AAGA;;AACA,QAAM,CAACG,QAAD,EAAWC,WAAX,IAA0BnB,QAAQ,CAAC,EAAD,CAAxC;AAIA;;AACA,QAAMoB,KAAK,GAAG,MAAM;AAChB,UAAMC,YAAY,GAAGP,UAAU,CAACQ,GAAX,CAAgBC,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACC,SAAL,CAAeC,QAAtB;AAAgC,KAA3D,CAArB;AACA,UAAMC,UAAU,GAAGZ,UAAU,CAACQ,GAAX,CAAgBC,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACC,SAAL,CAAeG,MAAtB;AAA8B,KAAzD,CAAnB;AACA,UAAMC,QAAQ,GAAGd,UAAU,CAACQ,GAAX,CAAgBC,IAAD,IAAU;AAAE,aAAOA,IAAI,CAACM,IAAZ;AAAkB,KAA7C,CAAjB;AACAV,IAAAA,WAAW,CAAC;AACRW,MAAAA,MAAM,EAAEF,QADA;AAERG,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,KAAK,EAAE,qBADX;AAGIT,QAAAA,IAAI,EAAEF,YAHV;AAIIY,QAAAA,eAAe,EAAE,CACb,uBADa,CAJrB;AAQIC,QAAAA,SAAS,EAAE;AARf,OADM,EAaN;AACIF,QAAAA,KAAK,EAAE,mBADX;AAEIT,QAAAA,IAAI,EAAEG,UAFV;AAGIO,QAAAA,eAAe,EAAE,CACb,uBADa,CAHrB;AAOIC,QAAAA,SAAS,EAAE;AAPf,OAbM;AAFF,KAAD,CAAX;AA8BH,GAlCD;AAmCA;;;AAEAjC,EAAAA,SAAS,CAAC,MAAM;AACZ,QAAIa,UAAJ,EAAgB;AACZ,UAAIG,IAAJ,EAAU;AACNG,QAAAA,KAAK;AACR;AAEJ;AAGJ,GATQ,EASN,CAACN,UAAD,CATM,CAAT;AAYA,sBACI;AAAK,IAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAGI;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAMG,IAAN,MADJ,CAHJ,EASKJ,OAAO,KAAK,IAAZ,gBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qCAAnB,gBAA8D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAE3D;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAEI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAEK,QAAZ;AAAsB,IAAA,OAAO,EAAE;AAC3BiB,MAAAA,UAAU,EAAE,IADe;AAE3BC,MAAAA,KAAK,EAAE;AAAEC,QAAAA,IAAI,EAAE,kCAAR;AAA4CC,QAAAA,OAAO,EAAE,IAArD;AAA2DC,QAAAA,QAAQ,EAAE;AAArE,OAFoB;AAG3BC,MAAAA,MAAM,EAAE;AACJC,QAAAA,KAAK,EAAE,CACH;AACIC,UAAAA,KAAK,EAAE;AACHC,YAAAA,QAAQ,EAAE,IADP;AAEHC,YAAAA,aAAa,EAAE,EAFZ;AAGHC,YAAAA,WAAW,EAAE;AAHV,WADX;AAMIC,UAAAA,SAAS,EAAE;AACPR,YAAAA,OAAO,EAAE;AADF;AANf,SADG,CADH;AAYJS,QAAAA,KAAK,EAAE,CAAC;AACJD,UAAAA,SAAS,EAAE;AACPR,YAAAA,OAAO,EAAE;AADF;AADP,SAAD;AAZH,OAHmB;AAoBxBU,MAAAA,SAAS,EAAE;AAEVC,QAAAA,WAAW,EAAE,EAFH;AAGVC,QAAAA,QAAQ,EAAE,EAHA;AAIVC,QAAAA,MAAM,EAAE,eAJE;AAKVC,QAAAA,QAAQ,EAAE;AALA;AApBa,KAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAF2D,CATnE,CADJ,CADJ;AA0DH,CA7HD;;AA+HA,eAAe5C,UAAf","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport '../Css/Componentscss.css';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst PlotScreen = (props) => {\r\n\r\n\r\n    /* Getting state of the carbon intensity from the redux store*/\r\n    const carbonIntensityData = useSelector(state => state.carbon);\r\n    const { loading, carbonData } = carbonIntensityData\r\n\r\n    /* Getting date of the day from the redux store*/\r\n    const day = useSelector(state => state.chosenDate);\r\n    const { date } = day\r\n\r\n\r\n    /*initialising state for plot data */\r\n    const [plotData, setPlotData] = useState({})\r\n\r\n    \r\n\r\n    /*function to update plotData state with data and options for the plot */\r\n    const chart = () => {\r\n        const forecastData = carbonData.map((data) => { return data.intensity.forecast })\r\n        const actualData = carbonData.map((data) => { return data.intensity.actual })\r\n        const fromData = carbonData.map((data) => { return data.from })\r\n        setPlotData({\r\n            labels: fromData,\r\n            datasets: [\r\n                {\r\n                    label: 'Forecast Intensity ',\r\n\r\n                    data: forecastData,\r\n                    backgroundColor: [\r\n                        'rgba(255, 158, 64, 3)'\r\n\r\n                    ],\r\n                    bandwidth: 4,\r\n                    \r\n                },\r\n\r\n                {\r\n                    label: 'Actual Intensity ',\r\n                    data: actualData,\r\n                    backgroundColor: [\r\n                        'rgba(54, 162, 235, 1)'\r\n\r\n                    ],\r\n                    bandwidth: 4\r\n                }\r\n            ]\r\n\r\n\r\n        });\r\n\r\n\r\n    }\r\n    /*call chart function only when there is data from the Carbon Data intensity*/\r\n\r\n    useEffect(() => {\r\n        if (carbonData) {\r\n            if (date) {\r\n                chart()\r\n            }\r\n\r\n        }\r\n\r\n       \r\n    }, [carbonData])\r\n\r\n\r\n    return (\r\n        <div className='Frontpage '>\r\n            <div className='main'>\r\n\r\n                \r\n                <div className='date'>\r\n                    <h2> {date} </h2>\r\n                </div>\r\n\r\n                {/*displaying loading while waiting for data from the API*/}\r\n\r\n                {loading === true ? <div> Loading........  Please wait</div> : <div> \r\n\r\n                    <div className='plot'>\r\n\r\n                        <Line data={plotData} options={{\r\n                            responsive: true,\r\n                            title: { text: 'CARBON INTENSITY COMPARISON PLOT', display: true, fontSize: 20 },\r\n                            scales: {\r\n                                yAxes: [\r\n                                    {\r\n                                        ticks: {\r\n                                            autoSkip: true,\r\n                                            maxTicksLimit: 10,\r\n                                            beginAtZero: true\r\n                                        },\r\n                                        gridLines: {\r\n                                            display: false\r\n                                        }\r\n                                    }],\r\n                                xAxes: [{\r\n                                    gridLines: {\r\n                                        display: false\r\n                                    }\r\n                                }]\r\n                            }, animation: {\r\n\r\n                                currentStep: 10,\r\n                                numSteps: 10,\r\n                                easing: 'easeInOutQuad',\r\n                                duration: 1060,\r\n\r\n\r\n                            }\r\n\r\n                        }} />\r\n                    </div>\r\n                </div>\r\n                }\r\n               \r\n                \r\n            \r\n            \r\n            </div>\r\n\r\n           \r\n        </div>\r\n        )\r\n}\r\n\r\nexport default PlotScreen; "]},"metadata":{},"sourceType":"module"}