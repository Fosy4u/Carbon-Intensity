{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware, compose } from 'redux';\nimport { productListReducer, productDetailsReducer } from './Reducers/ProductReducer';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { cartReducer } from './Reducers/CartReducer';\nimport { userSigninReducer } from './Reducers/SigninReducer';\nimport { userRegisterReducer } from './Reducers/RegisterReducer';\nimport Cookie from 'js-cookie';\n/*Cookie helps in preserving the state when screen refreshed is perform */\n\n/* To get access to the cookie and convert it back to JSON object so it can be set as initial state for state cart . Note that || [] sets empty array if there is no item*/\n\nconst cartItems = Cookie.getJSON(\"cartItems\") || [];\nconst userInfo = Cookie.getJSON(\"userInfo\");\nconst initialState = {\n  cart: {\n    cartItems\n  },\n  userSignin: {\n    userInfo\n  },\n  registerinfo: {\n    email: 'true'\n  }\n};\nconst logger = createLogger();\nconst rootreducer = combineReducers({\n  productList: productListReducer,\n  productDetails: productDetailsReducer,\n  cart: cartReducer,\n  userSignin: userSigninReducer,\n  userRegisterReducer,\n  userRegister: userRegisterReducer\n});\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\nconst store = createStore(rootreducer, initialState, composeEnhancer(applyMiddleware(thunk, logger)));\nexport default store;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/GitHub/Fosy-Store/src/store.js"],"names":["createStore","combineReducers","applyMiddleware","compose","productListReducer","productDetailsReducer","thunk","createLogger","cartReducer","userSigninReducer","userRegisterReducer","Cookie","cartItems","getJSON","userInfo","initialState","cart","userSignin","registerinfo","email","logger","rootreducer","productList","productDetails","userRegister","composeEnhancer","window","_REDUX_DEVTOOLS_EXTENSION_COMPOSE_","store"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,EAAwDC,OAAxD,QAAwE,OAAxE;AACA,SAASC,kBAAT,EAA6BC,qBAA7B,QAA0D,2BAA1D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,SAASC,YAAT,QAA6B,cAA7B;AACA,SAASC,WAAT,QAA4B,wBAA5B;AACA,SAASC,iBAAT,QAAkC,0BAAlC;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,OAAOC,MAAP,MAAmB,WAAnB;AAEA;;AACA;;AACA,MAAMC,SAAS,GAAGD,MAAM,CAACE,OAAP,CAAe,WAAf,KAA+B,EAAjD;AACA,MAAMC,QAAQ,GAAGH,MAAM,CAACE,OAAP,CAAe,UAAf,CAAjB;AAGA,MAAME,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AAAEJ,IAAAA;AAAF,GADW;AACIK,EAAAA,UAAU,EAAE;AAAEH,IAAAA;AAAF,GADhB;AAC8BI,EAAAA,YAAY,EAAE;AAACC,IAAAA,KAAK,EAAE;AAAR;AAD5C,CAArB;AAEA,MAAMC,MAAM,GAAGb,YAAY,EAA3B;AACA,MAAMc,WAAW,GAAGpB,eAAe,CAAC;AAChCqB,EAAAA,WAAW,EAAElB,kBADmB;AAEhCmB,EAAAA,cAAc,EAAElB,qBAFgB;AAGhCW,EAAAA,IAAI,EAAER,WAH0B;AAIhCS,EAAAA,UAAU,EAAER,iBAJoB;AAIDC,EAAAA,mBAJC;AAKhCc,EAAAA,YAAY,EAAEd;AALkB,CAAD,CAAnC;AAQA,MAAMe,eAAe,GAAGC,MAAM,CAACC,kCAAP,IAA6CxB,OAArE;AACA,MAAMyB,KAAK,GAAG5B,WAAW,CAACqB,WAAD,EAAcN,YAAd,EAA4BU,eAAe,CAACvB,eAAe,CAACI,KAAD,EAAQc,MAAR,CAAhB,CAA3C,CAAzB;AAGA,eAAeQ,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware, compose  } from 'redux';\r\nimport { productListReducer, productDetailsReducer } from './Reducers/ProductReducer';\r\nimport thunk from 'redux-thunk';\r\nimport { createLogger } from 'redux-logger'\r\nimport { cartReducer } from './Reducers/CartReducer';\r\nimport { userSigninReducer } from './Reducers/SigninReducer';\r\nimport { userRegisterReducer } from './Reducers/RegisterReducer';\r\nimport Cookie from 'js-cookie';\r\n    \r\n/*Cookie helps in preserving the state when screen refreshed is perform */\r\n/* To get access to the cookie and convert it back to JSON object so it can be set as initial state for state cart . Note that || [] sets empty array if there is no item*/\r\nconst cartItems = Cookie.getJSON(\"cartItems\") || [];\r\nconst userInfo = Cookie.getJSON(\"userInfo\") ;\r\n\r\n\r\nconst initialState = {\r\n    cart: { cartItems }, userSignin: { userInfo }, registerinfo: {email: 'true'}};\r\nconst logger = createLogger();\r\nconst rootreducer = combineReducers({\r\n    productList: productListReducer,\r\n    productDetails: productDetailsReducer,\r\n    cart: cartReducer,\r\n    userSignin: userSigninReducer, userRegisterReducer,\r\n    userRegister: userRegisterReducer,\r\n})\r\n\r\nconst composeEnhancer = window._REDUX_DEVTOOLS_EXTENSION_COMPOSE_ || compose;\r\nconst store = createStore(rootreducer, initialState, composeEnhancer(applyMiddleware(thunk, logger)))\r\n\r\n\r\nexport default store"]},"metadata":{},"sourceType":"module"}