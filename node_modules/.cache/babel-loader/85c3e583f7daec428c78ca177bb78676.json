{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administrator\\\\Documents\\\\CLIENT PROJECTS\\\\Trilateral\\\\src\\\\Component\\\\Screen\\\\PlotScreen.js\";\nimport ReactDOM from 'react-dom';\nimport React, { Component } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport '../Css/PlotScreenCss.css';\nimport { useState } from 'react';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\nimport Cookies from 'js-cookie';\n\nconst PlotScreen = () => {\n  /* Getting state of the carbon intensity from the redux store*/\n  const carbonIntensityData = useSelector(state => state.carbon);\n  const {\n    loading,\n    carbonData\n  } = carbonIntensityData;\n  /*initialising state for plot data */\n\n  const [plotData, setPlotData] = useState({});\n  /*function to update plotData state with data and options */\n\n  const chart = () => {\n    if (carbonData) {\n      const forecastData = carbonData.map(data => {\n        return data.intensity.forecast;\n      });\n      const actualData = carbonData.map(data => {\n        return data.intensity.actual;\n      });\n      setPlotData({\n        labels: ['monday', 'tuesday', 'wed', 'Thu', 'fri', 'sat'],\n        datasets: [{\n          label: 'Forecast Intensity ',\n          data: forecastData,\n          backgroundColor: ['rgba(75, 192, 192, 0.6)'],\n          bandwidth: 4\n        }, {\n          label: 'Actual Intensity ',\n          data: actualData,\n          backgroundColor: ['rgba(54, 162, 235, 1)'],\n          bandwidth: 4\n        }]\n      });\n    }\n  };\n\n  useEffect(() => {\n    chart();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }\n  }, \" PLOT SCREEN \"), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Link, {\n    to: \"/\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 17\n    }\n  }, \" \", /*#__PURE__*/React.createElement(\"button\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 33\n    }\n  }, \" back \"), \" \")), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"plot\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Line, {\n    data: plotData,\n    options: {\n      responsive: true,\n      title: {\n        text: 'THICKNES SCALE',\n        display: true\n      },\n      scales: {\n        yAxes: [{\n          ticks: {\n            autoSkip: true,\n            maxTicksLimit: 10,\n            beginAtZero: true\n          },\n          gridLines: {\n            display: false\n          }\n        }],\n        xAxes: [{\n          gridLines: {\n            display: false\n          }\n        }]\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 17\n    }\n  })));\n};\n\nexport default PlotScreen;","map":{"version":3,"sources":["C:/Users/Administrator/Documents/CLIENT PROJECTS/Trilateral/src/Component/Screen/PlotScreen.js"],"names":["ReactDOM","React","Component","Line","useState","useEffect","useDispatch","useSelector","Link","Route","Switch","withRouter","Cookies","PlotScreen","carbonIntensityData","state","carbon","loading","carbonData","plotData","setPlotData","chart","forecastData","map","data","intensity","forecast","actualData","actual","labels","datasets","label","backgroundColor","bandwidth","responsive","title","text","display","scales","yAxes","ticks","autoSkip","maxTicksLimit","beginAtZero","gridLines","xAxes"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\r\nimport React, { Component } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport '../Css/PlotScreenCss.css';\r\nimport { useState } from 'react';\r\nimport { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link, Route, Switch, withRouter } from 'react-router-dom';\r\nimport Cookies from 'js-cookie';\r\n\r\n\r\n\r\nconst PlotScreen = () => {\r\n\r\n\r\n    /* Getting state of the carbon intensity from the redux store*/\r\n    const carbonIntensityData = useSelector(state => state.carbon);\r\n    const { loading, carbonData } = carbonIntensityData\r\n\r\n    /*initialising state for plot data */\r\n    const [plotData, setPlotData] = useState({})\r\n\r\n    \r\n\r\n    /*function to update plotData state with data and options */\r\n    const chart = () => {\r\n        if (carbonData) {\r\n            const forecastData = carbonData.map((data) => { return data.intensity.forecast })\r\n            const actualData = carbonData.map((data) => { return data.intensity.actual })\r\n            setPlotData({\r\n                labels: ['monday', 'tuesday', 'wed', 'Thu', 'fri', 'sat'],\r\n                datasets: [\r\n                    {\r\n                        label: 'Forecast Intensity ',\r\n\r\n                        data: forecastData,\r\n                        backgroundColor: [\r\n                            'rgba(75, 192, 192, 0.6)'\r\n\r\n                        ],\r\n                        bandwidth: 4\r\n                    },\r\n\r\n                    {\r\n                        label: 'Actual Intensity ',\r\n                        data: actualData,\r\n                        backgroundColor: [\r\n                            'rgba(54, 162, 235, 1)'\r\n\r\n                        ],\r\n                        bandwidth: 4\r\n                    }\r\n                ]\r\n\r\n\r\n            });}\r\n        \r\n        \r\n\r\n\r\n    }\r\n    \r\n\r\n    useEffect(() => {\r\n        \r\n            chart()\r\n        \r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            <h1> PLOT SCREEN </h1>\r\n            <div>\r\n                <Link to={\"/\"}> <button > back </button> </Link>\r\n            </div>\r\n            <div className='plot'>\r\n                \r\n                <Line data={plotData} options={{\r\n                    responsive: true,\r\n                    title: { text: 'THICKNES SCALE', display: true },\r\n                    scales: {\r\n                        yAxes: [\r\n                            {\r\n                                ticks: {\r\n                                    autoSkip: true,\r\n                                    maxTicksLimit: 10,\r\n                                    beginAtZero: true\r\n                                },\r\n                                gridLines: {\r\n                                    display: false\r\n                                }\r\n                            }],\r\n                        xAxes: [{\r\n                            gridLines: {\r\n                                display: false\r\n                            }\r\n                        }]\r\n                    }\r\n                }} />\r\n            </div>\r\n            \r\n        </div>\r\n        )\r\n}\r\n\r\nexport default PlotScreen; "]},"metadata":{},"sourceType":"module"}